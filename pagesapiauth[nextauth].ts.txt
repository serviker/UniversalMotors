pages/api/auth/[...nextauth].ts

/*import NextAuth, { DefaultSession } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { connectToDatabase } from "../../../lib/mongodb";
import User from "../../../models/User";
import bcrypt from "bcryptjs";


interface User {
    id: string;
    name: string;
    email: string;
    role: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
    [key: string]: any;
}

// Расширяем типы NextAuth
declare module "next-auth" {
    interface Session {
        user: {
            name?: string | null;
            email?: string | null;
            image?: string | null;
            role?: string; // добавляем поле role в session.user
        } & DefaultSession["user"];
    }

    interface JWT {
        role?: string; // добавляем поле role в JWT
    }
}

export default NextAuth({
    providers: [
        CredentialsProvider({
            name: "Credentials",
            credentials: {
                email: { label: "Email", type: "text" },
                password: { label: "Password", type: "password" },
            },
            async authorize(credentials) {
                await connectToDatabase();

                // Проверяем пользователя в базе
                const user = await User.findOne({ email: credentials?.email });

                // Если пользователь не найден или пароль неверный
                if (!user || !bcrypt.compareSync(credentials?.password || "", user.password)) {
                    throw new Error("Invalid email or password");
                }

                // Возвращаем объект, который соответствует типу User
                return {
                    id: user._id.toString(),
                    name: `${user.firstName} ${user.lastName}`,
                    email: user.email,
                    role: user.role, // добавляем role
                    firstName: user.firstName,
                    lastName: user.lastName,
                    phone: user.phone,
                } as User;
            },
        }),
    ],
    callbacks: {
        async jwt({ token, user }) {
            // Убедимся, что user имеет свойство role
            if (user) {
                token.role = (user as User).role; // кастим user к типу User, чтобы TypeScript знал о поле role
            }
            return token;
        },
        async session({ session, token }) {
            if (session.user) {
                session.user.role = token.role as string; // добавляем role в сессию
            }
            return session;
        },
    },
    secret: process.env.NEXTAUTH_SECRET,
});/*
