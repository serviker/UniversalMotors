import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI as string;

console.log("üîê URI MongoDB:", MONGODB_URI);

if (!MONGODB_URI) {
    throw new Error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω–∞!");
}

// üîß –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
declare global {
    // eslint-disable-next-line no-var
    var mongoose: {
        conn: mongoose.Connection | null;
        promise: Promise<mongoose.Connection> | null;
    } | undefined;
}

// ‚õîÔ∏è –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ global.mongoose –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
if (!global.mongoose) {
    global.mongoose = {
        conn: null,
        promise: null,
    };
}

const cached = global.mongoose;

export async function connectToDatabase() {
    if (cached.conn) return cached.conn;

    if (!cached.promise) {
        console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");

        cached.promise = mongoose
            .connect(MONGODB_URI)
            .then((mongoose) => {
                console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB!");
                return mongoose.connection.asPromise();
            })
            .catch((error) => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
                process.exit(1);
            });
    }

    cached.conn = await cached.promise;

    if (cached.conn.db) {
        console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞:", cached.conn.db.databaseName);
    } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.");
    }

    return cached.conn;
}

/*let cached = (global as any).mongoose || { conn: null, promise: null };

export async function connectToDatabase() {
    if (cached.conn) return cached.conn;

    if (!cached.promise) {
        console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");

        cached.promise = mongoose
            .connect(MONGODB_URI)
            .then((mongoose) => {
                console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB!");

                // –î–æ–∂–∏–¥–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                return mongoose.connection.asPromise();
            })
            .catch((error) => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
                process.exit(1);
            });
    }

    cached.conn = await cached.promise;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ db
    if (cached.conn.db) {
        console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞:", cached.conn.db.databaseName);
    } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.");
    }

    return cached.conn;
} */

// üîπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤:
//connectToDatabase();
/*export async function connectToDatabase() {
    try {
        console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...");

        const conn = await mongoose.connect(MONGODB_URI, {
            dbName: "motoAutoWebSite",
        });

        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB!");
        console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:", conn.connection.name);

        return conn;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MongoDB:", err);
        throw err;
    }
}*/