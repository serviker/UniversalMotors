// import { withAuth } from "next-auth/middleware";
// import { NextResponse } from "next/server";
//
// export default withAuth(
//   function middleware(req) {
//     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//     return NextResponse.next();
//   },
//   {
//     callbacks: {
//       authorized: ({ token }) => {
//         // –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
//         return !!token;
//       },
//     },
//     pages: {
//       signIn: "/login", // —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
//     },
//   }
// );
//
// // –£–∫–∞–∂–∏ –∫–∞–∫–∏–µ –ø—É—Ç–∏ –Ω—É–∂–Ω–æ –∑–∞—â–∏—â–∞—Ç—å
// export const config = {
//   matcher: ["/dashboard/:path*", "/profile/:path*", "/admin/:path*"], // –ª—é–±—ã–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
// };

import { NextRequest, NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";

export async function middleware(req: NextRequest) {
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
  const isAuth = !!token;
  const { pathname } = req.nextUrl;

  const isAuthPages = pathname === "/login" || pathname === "/register";

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ä–æ–ª—è–º
  const roleAccessMap: Record<string, string[]> = {
    admin: ["/seo", "/users"],
    manager: ["/users"],
    warehouse: ["/warehouse"],
  };

  if (!isAuth && !isAuthPages) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  if (isAuth && isAuthPages) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–æ–ª—è–º
  const role = token?.role;

  const hasAccess = Object.entries(roleAccessMap).some(([allowedRole, paths]) =>
      role === allowedRole && paths.includes(pathname)
  );

  const isProtectedPath = Object.values(roleAccessMap).flat().includes(pathname);

  if (isProtectedPath && !hasAccess) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.(?:png|jpg|jpeg|svg|webp|gif)).*)',
  ],
};



