import { NextRequest, NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";

// üîß Middleware ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
export async function middleware(req: NextRequest) {
  // üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ cookies
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
  const isAuth = !!token; // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const { pathname } = req.nextUrl; // –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

  // üü° –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const isAuthPages = pathname === "/login" || pathname === "/register";

  // üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
  const roleAccessMap: Record<string, string[]> = {
    admin: ["/seo", "/users"],
    manager: ["/users"],
    warehouse: ["/warehouse"],
  };

  // üîÅ –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–µ –Ω–∞ /login –∏–ª–∏ /register ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ /login
  if (!isAuth && !isAuthPages) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // üîÑ –ï—Å–ª–∏ —é–∑–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ /login –∏–ª–∏ /register ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  if (isAuth && isAuthPages) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  // üõ° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
  const role = token?.role;

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—É—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É
  const hasAccess = Object.entries(roleAccessMap).some(
      ([allowedRole, paths]) => role === allowedRole && paths.includes(pathname)
  );

  // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä—à—Ä—É—Ç –∑–∞—â–∏—â—ë–Ω–Ω—ã–º
  const isProtectedPath = Object.values(roleAccessMap).flat().includes(pathname);

  // ‚ùå –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –∑–∞—â–∏—â—ë–Ω, –Ω–æ —É —é–∑–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404 —á–µ—Ä–µ–∑ rewrite
  if (isProtectedPath && !hasAccess) {
    return NextResponse.rewrite(new URL("/auth-blocked", req.url));
  }

  // ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
  return NextResponse.next();
}

// ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è middleware: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º API –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.(?:png|jpg|jpeg|svg|webp|gif)).*)',
  ],
};
